"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const rest_1 = require("@discloudapp/rest");
const node_process_1 = require("node:process");
const AppManager_1 = __importDefault(require("../managers/AppManager"));
const TeamManager_1 = __importDefault(require("../managers/TeamManager"));
const User_1 = __importDefault(require("../structures/User"));
const util_1 = require("../util");
/**
 * Client for Discloud API
 */
class DiscloudApp {
    #token;
    options;
    apps = new AppManager_1.default(this);
    team = new TeamManager_1.default(this);
    user = new User_1.default(this, {});
    rest = new rest_1.REST();
    constructor(options = {}) {
        options = { ...util_1.DefaultDiscloudAppOptions, ...options };
        if (options.token) {
            this.#setToken(options.token);
            delete options.token;
        }
        this.options = options;
    }
    #setToken(token) {
        if (!node_process_1.env.DISCLOUD_TOKEN && token)
            node_process_1.env.DISCLOUD_TOKEN = token;
        this.rest.setToken(this.#token = token);
        return this;
    }
    get token() {
        return this.#token;
    }
    /**
     * Login on Discloud API
     *
     * @param token - Your Discloud token
     */
    async login(token = this.token ?? node_process_1.env.DISCLOUD_TOKEN) {
        if (typeof token !== "string")
            throw new Error("[DISCLOUD API] Missing token.");
        this.#setToken(token);
        await this.user.fetch();
        return "[DISCLOUD API] Logged.";
    }
}
exports.default = DiscloudApp;
