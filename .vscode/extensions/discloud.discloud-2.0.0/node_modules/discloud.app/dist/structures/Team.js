"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Base_1 = __importDefault(require("./Base"));
class Team extends Base_1.default {
    /**
     * Your team application id
     */
    id;
    /**
     * Your team's app exit code on stop
     */
    exitCode;
    /**
     * Your team's app programming language
     */
    lang;
    /**
     * Your team application name
     */
    name;
    /**
     * If your team application is online
     */
    online;
    /**
     * Your permissions to manage this application.
     */
    perms;
    /**
     * If your team's app stopped due to low RAM
     */
    ramKilled;
    constructor(discloudApp, data) {
        super(discloudApp);
        this.id = data.id;
        this.exitCode = data.exitCode;
        this.lang = data.lang;
        this.name = data.name;
        this.online = data.online;
        this.perms = data.perms;
        this.ramKilled = data.ramKilled;
    }
    /**
     * Get backups for the app of your team on Discloud
     */
    backup() {
        return this.discloudApp.team.backup(this.id);
    }
    /**
     * Set the quantity of ram to application of your team
     *
     * @param quantity - Minimum values is `100` to `bot` or `512` for `site`
     * @returns Promise {@link RESTPutApiAppRamResult}
     */
    setRam(quantity) {
        return this.discloudApp.team.ram(this.id, quantity);
    }
    /**
     * Get the status for the app of your team on Discloud
     */
    status() {
        return this.discloudApp.team.status(this.id);
    }
    /**
     * Get logs for the app of your team on Discloud
     */
    terminal() {
        return this.discloudApp.team.terminal(this.id);
    }
    /**
     * Update an of your team apps on Discloud
     *
     * @param options - Options to update your app.
     * @returns Promise {@link RESTPutApiAppCommitResult}
     */
    update(options) {
        return this.discloudApp.team.update(this.id, options);
    }
    /**
     * Restart your team application on Discloud
     */
    async restart() {
        const data = await this.discloudApp.team.restart(this.id);
        this.online = data.status === "ok";
        return data;
    }
    /**
     * Start your team application on Discloud
     */
    async start() {
        const data = await this.discloudApp.team.start(this.id);
        this.online = data.status === "ok";
        return data;
    }
    /**
     * Stop your team application on Discloud
     */
    async stop() {
        const data = await this.discloudApp.team.stop(this.id);
        this.online = !(data.status === "ok");
        return data;
    }
    /**
     * @returns app id
     */
    toString() {
        return this.id;
    }
}
exports.default = Team;
